import ctypes
import itertools
import math

# üîµ –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
BLUE = "\033[94m"
GREEN = "\033[92m"
RED = "\033[91m"
YELLOW = "\033[93m"
RESET = "\033[0m"


def super_explained_arithmetic_encode(word, probabilities):
    """
    üìö –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ - —É–ø–∞–∫–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ –º–µ–∂–¥—É 0 –∏ 1
    –ö–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª —Å—É–∂–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –∫–∞–∫ –≤ –∏–≥—Ä–µ "–≥–æ—Ä—è—á–æ-—Ö–æ–ª–æ–¥–Ω–æ" üîç
    """
    print(f"\n{GREEN}üîπ –ö–æ–¥–∏—Ä—É–µ–º —Å–ª–æ–≤–æ: '{word}' —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏:{RESET}")
    for char, prob in probabilities.items():
        print(f"   '{char}': {prob:.2f} ({prob * 100:.0f}% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏)")

    # 1. –ù–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω [0, 1]
    low, high = 0.0, 1.0
    print(f"\n{GREEN}üîπ –ù–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: [{low}, {high}]{RESET}")

    for step, char in enumerate(word, 1):
        print(f"\n{YELLOW}üîπ –®–∞–≥ {step}: –∫–æ–¥–∏—Ä—É–µ–º '{char}'{RESET}")

        # 2. –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        range_size = high - low
        print(f"   –¢–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: [{low:.8f}, {high:.8f}]")
        print(f"   –î–ª–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {range_size:.8f}")

        # 3. –ò—â–µ–º –ø–æ–¥–¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        current_low = low
        print(f"\n   –ü–æ–¥–¥–∏–∞–ø–∞–∑–æ–Ω—ã —Å–∏–º–≤–æ–ª–æ–≤:")
        for symbol, prob in probabilities.items():
            symbol_high = current_low + range_size * prob
            marker = " ‚Üê " + RED + "–ù–ê–®!" + RESET if symbol == char else ""
            print(f"   '{symbol}': [{current_low:.8f}, {symbol_high:.8f}]{marker}")
            if symbol == char:
                high = symbol_high
                break
            current_low = symbol_high

        low = current_low
        print(f"\n   {GREEN}–ù–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω:{RESET}")
        print(f"   [{low:.8f}, {high:.8f}]")
        print(f"   –ù–æ–≤–∞—è –¥–ª–∏–Ω–∞: {high - low:.8f}")

    # 4. –í—ã–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ç–æ—á–∫—É
    encoded_value = (low + high) / 2
    print(f"\n{GREEN}üîπ –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ:{RESET}")
    print(f"   ({low:.10f} + {high:.10f}) / 2 = {encoded_value:.10f}")

    return encoded_value


def explain_binary_conversion(number):
    """üßÆ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ –≤ –¥–≤–æ–∏—á–Ω—ã–π –≤–∏–¥ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏"""
    print(f"\n{GREEN}üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º {number:.10f} –≤ –¥–≤–æ–∏—á–Ω—ã–π –∫–æ–¥:{RESET}")
    binary = []
    working_num = number

    for i in range(1, 21):  # 20 –∏—Ç–µ—Ä–∞—Ü–∏–π
        working_num *= 2
        bit = int(working_num)
        binary.append(str(bit))

        action = ""
        if bit == 1:
            working_num -= 1
            action = f" ({RED}–≤—ã—á–∏—Ç–∞–µ–º 1{RESET}, –æ—Å—Ç–∞—Ç–æ–∫: {working_num:.5f})"

        print(f"   –®–∞–≥ {i:2d}: {working_num / 2:.5f} √ó 2 ‚Üí {working_num:.5f} ‚Üí –±–∏—Ç {bit}{action}")

    binary_str = ''.join(binary)
    print(f"\n   {GREEN}–ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–¥:{RESET} {binary_str}")
    print(f"   (–ü–µ—Ä–≤—ã–µ 20 –±–∏—Ç–æ–≤ —á–∏—Å–ª–∞ {number:.10f})")
    return binary_str


def compare_compression_methods(word, probabilities):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Å–∂–∞—Ç–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""

    # 1. –†–∞–∑–º–µ—Ä –±–µ–∑ —Å–∂–∞—Ç–∏—è (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π –∫–æ–¥)
    uniform_bits = len(word) * math.ceil(math.log2(len(probabilities)))

    # 2. –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∏–Ω–∏–º—É–º (—ç–Ω—Ç—Ä–æ–ø–∏—è –®–µ–Ω–Ω–æ–Ω–∞)
    entropy = -sum(p * math.log2(p) for p in probabilities.values())
    shannon_bits = entropy * len(word)

    # 3. –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
    binary_code = bin(ctypes.c_uint32.from_buffer(ctypes.c_float(encoded_num)).value)
    arithmetic_bits = len(binary_code)

    # 4. RLE-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    rle_code = "".join(f"{len(list(g))}{k}" for k, g in itertools.groupby(word))
    rle_bits = len(rle_code) * 8  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    print(f"\n{GREEN}üîπ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Å–∂–∞—Ç–∏—è:{RESET}")
    print(f"{'–ú–µ—Ç–æ–¥':<25} | {'–†–∞–∑–º–µ—Ä (–±–∏—Ç)':<10} | {'–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å':<10}")
    print("-" * 50)
    print(f"{'1. –ë–µ–∑ —Å–∂–∞—Ç–∏—è':<25} | {uniform_bits:<10} | {'1.00x':<10}")
    print(f"{'2. –¢–µ–æ—Ä–∏—è –®–µ–Ω–Ω–æ–Ω–∞':<25} | {shannon_bits:<10.1f} | {uniform_bits / shannon_bits:<10.1f}x")
    print(f"{'3. –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ':<25} | {arithmetic_bits:<10} | {uniform_bits / arithmetic_bits:<10.1f}x")
    print(f"{'4. RLE':<25} | {rle_bits:<10} | {uniform_bits / rle_bits:<10.1f}x")


# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
probabilities = {
    'a': 0.05,  # 5%
    'b': 0.10,  # 10%
    'c': 0.05,  # 5%
    'd': 0.55,  # 55% (—Å–∞–º—ã–π —á–∞—Å—Ç—ã–π)
    'e': 0.15,  # 15%
    'f': 0.10  # 10%
}
word = "eacdbf"

print(f"\n{BLUE}=== –ê–†–ò–§–ú–ï–¢–ò–ß–ï–°–ö–û–ï –ö–û–î–ò–†–û–í–ê–ù–ò–ï ===")
print("–ö–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª —Å—É–∂–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω! ==={RESET}")

# 1. –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
encoded_num = super_explained_arithmetic_encode(word, probabilities)

# 2. –î–≤–æ–∏—á–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
binary_code = explain_binary_conversion(encoded_num)

# 3. –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
original_bits = len(word) * 3  # 3 –±–∏—Ç–∞/—Å–∏–º–≤–æ–ª (log2(6) ‚âà 2.58 ‚Üí 3)
compressed_bits = len(binary_code)
ratio = original_bits / compressed_bits

print(f"\n{GREEN}üîπ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∂–∞—Ç–∏—è:{RESET}")
print(f"   –ò—Å—Ö–æ–¥–Ω–æ: {len(word)} —Å–∏–º–≤. √ó 3 –±–∏—Ç–∞ = {original_bits} –±–∏—Ç")
print(f"   –ü–æ—Å–ª–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {compressed_bits} –±–∏—Ç")
print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {ratio:.2f}x")

# 4. –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –æ—Å–Ω–æ–≤–∞
entropy = -sum(p * math.log2(p) for p in probabilities.values())
print(f"\n{GREEN}üîπ –¢–µ–æ—Ä–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:{RESET}")
print(f"   –≠–Ω—Ç—Ä–æ–ø–∏—è: -Œ£ p¬∑log2(p) = {entropy:.3f} –±–∏—Ç/—Å–∏–º–≤–æ–ª")
print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {entropy * len(word):.1f} –±–∏—Ç")
print(f"{BLUE}=== –ö–û–ù–ï–¶ ==={RESET}")
# –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è arithmetic_encode –∏ explain_binary
print(f"\n{BLUE}=== –°–†–ê–í–ù–ï–ù–ò–ï ==={RESET}")

compare_compression_methods(word, probabilities)
