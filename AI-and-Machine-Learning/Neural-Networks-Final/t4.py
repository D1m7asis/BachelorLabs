import torch
import torch.nn as nn

"""
–ó–∞–¥–∞—á–∞ ‚Ññ4.

1.     –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é forward_pass(X, w) (ùë§0 –≤—Ö–æ–¥–∏—Ç –≤ ùë§) –¥–ª—è –æ–¥–Ω–æ–≥–æ –Ω–µ–π—Ä–æ–Ω–∞ (—Å —Å–∏–≥–º–æ–∏–¥–æ–π) —Å –ø–æ–º–æ—â—å—é PyTorch.
"""


def forward_pass(X, w):
    """
    –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –Ω–µ–π—Ä–æ–Ω–∞ —Å —Å–∏–≥–º–æ–∏–¥–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        X (torch.Tensor): –ú–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–º (n_samples, n_features).
        w (torch.Tensor): –í–µ–∫—Ç–æ—Ä –≤–µ—Å–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–º (n_features + 1,), –≤–∫–ª—é—á–∞—è w0 (—Å–º–µ—â–µ–Ω–∏–µ).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        torch.Tensor: –í—ã—Ö–æ–¥ –Ω–µ–π—Ä–æ–Ω–∞ –ø–æ—Å–ª–µ —Å–∏–≥–º–æ–∏–¥—ã (—Ä–∞–∑–º–µ—Ä: (n_samples,)).
    """
    # –î–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—á–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü –∫ X –¥–ª—è —É—á—ë—Ç–∞ w0 (bias)
    X_with_bias = torch.cat([torch.ones(X.shape[0], 1), X], dim=1)

    # –õ–∏–Ω–µ–π–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: z = w0*1 + w1*x1 + ... + wn*xn
    z = torch.matmul(X_with_bias, w)

    # –°–∏–≥–º–æ–∏–¥–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
    sigma = nn.Sigmoid()
    output = sigma(z)

    return output


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –î–∞–Ω–Ω—ã–µ: 3 –æ–±—Ä–∞–∑—Ü–∞, 2 –ø—Ä–∏–∑–Ω–∞–∫–∞
    X = torch.tensor([[1.0, 2.0],
                      [0.5, -1.0],
                      [-1.0, 0.0]], dtype=torch.float32)

    # –í–µ—Å–∞: w0 (bias) = -0.5, w1 = 1.0, w2 = 0.5
    w = torch.tensor([-0.5, 1.0, 0.5], dtype=torch.float32)

    # –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥
    y_pred = forward_pass(X, w)
    print("–í—ã—Ö–æ–¥ –Ω–µ–π—Ä–æ–Ω–∞ –ø–æ—Å–ª–µ —Å–∏–≥–º–æ–∏–¥—ã:\n", y_pred)
